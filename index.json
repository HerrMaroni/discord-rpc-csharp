{
  "api/DiscordRPC.Application.html": {
    "href": "api/DiscordRPC.Application.html",
    "title": "Class Application | Discord RPC C#",
    "keywords": "Class Application Object representing a Discord application Inheritance System.Object Application Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public class Application Properties | Improve this Doc View Source Description Gets or sets the application description. Declaration [JsonPropertyName(\"description\")] public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Icon Gets or sets the hash of the icon. Declaration [JsonPropertyName(\"icon\")] public string Icon { get; set; } Property Value Type Description System.String | Improve this Doc View Source ID Gets or sets the application client ID. Declaration [JsonPropertyName(\"id\")] [JsonNumberHandling(JsonNumberHandling.AllowReadingFromString)] public ulong ID { get; set; } Property Value Type Description System.UInt64 | Improve this Doc View Source Name Gets or sets the application name. Declaration [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source RpcOrigins Gets or sets the array of RPC origin URLs. Declaration [JsonPropertyName(\"rpc_origins\")] public string[] RpcOrigins { get; set; } Property Value Type Description System.String []"
  },
  "api/DiscordRPC.Assets.html": {
    "href": "api/DiscordRPC.Assets.html",
    "title": "Class Assets | Discord RPC C#",
    "keywords": "Class Assets Information about the pictures used in the Rich Presence. Inheritance System.Object Assets Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class Assets Properties | Improve this Doc View Source IsLargeImageKeyExternal Gets if the large square image is from an external link Declaration [JsonIgnore] public bool IsLargeImageKeyExternal { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSmallImageKeyExternal Gets if the small profile artwork is from an external link Declaration [JsonIgnore] public bool IsSmallImageKeyExternal { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LargeImageID The ID of the large image. This is only set after Update Presence and will automatically become null when LargeImageKey is changed. Declaration [JsonIgnore] public ulong? LargeImageID { get; } Property Value Type Description System.Nullable < System.UInt64 > | Improve this Doc View Source LargeImageKey Name of the uploaded image for the large profile artwork. Max 256 Bytes. Declaration [JsonPropertyName(\"large_image\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string LargeImageKey { get; set; } Property Value Type Description System.String Remarks Allows URL to directly link to images. | Improve this Doc View Source LargeImageText The tooltip for the large square image. For example, \"Summoners Rift\" or \"Horizon Lunar Colony\". Max 128 Bytes. Declaration [JsonPropertyName(\"large_text\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string LargeImageText { get; set; } Property Value Type Description System.String | Improve this Doc View Source SmallImageID The ID of the small image. This is only set after Update Presence and will automatically become null when SmallImageKey is changed. Declaration [JsonIgnore] public ulong? SmallImageID { get; } Property Value Type Description System.Nullable < System.UInt64 > | Improve this Doc View Source SmallImageKey Name of the uploaded image for the small profile artwork. Max 256 Bytes. Declaration [JsonPropertyName(\"small_image\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string SmallImageKey { get; set; } Property Value Type Description System.String Remarks Allows URL to directly link to images. | Improve this Doc View Source SmallImageText The tooltip for the small circle image. For example, \"LvL 6\" or \"Ultimate 85%\". Max 128 Bytes. Declaration [JsonPropertyName(\"small_text\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string SmallImageText { get; set; } Property Value Type Description System.String"
  },
  "api/DiscordRPC.AuthenticateEvent.html": {
    "href": "api/DiscordRPC.AuthenticateEvent.html",
    "title": "Delegate AuthenticateEvent | Discord RPC C#",
    "keywords": "Delegate AuthenticateEvent Called when the Discord Client has received an Authenticate Response. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void AuthenticateEvent(object sender, AuthenticateMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event AuthenticateMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.AuthorizeEvent.html": {
    "href": "api/DiscordRPC.AuthorizeEvent.html",
    "title": "Delegate AuthorizeEvent | Discord RPC C#",
    "keywords": "Delegate AuthorizeEvent Called when the Discord Client has received an Authorize Response. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void AuthorizeEvent(object sender, AuthorizeMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event AuthorizeMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.BaseRichPresence.html": {
    "href": "api/DiscordRPC.BaseRichPresence.html",
    "title": "Class BaseRichPresence | Discord RPC C#",
    "keywords": "Class BaseRichPresence The base rich presence structure Inheritance System.Object BaseRichPresence RichPresence Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class BaseRichPresence Fields | Improve this Doc View Source InternalDetails Internal inner detail string Declaration protected string InternalDetails Field Value Type Description System.String | Improve this Doc View Source InternalState Internal inner state string Declaration protected string InternalState Field Value Type Description System.String Properties | Improve this Doc View Source Assets The names of the images to use and the tooltips to give those images. Declaration [JsonPropertyName(\"assets\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public Assets Assets { get; set; } Property Value Type Description Assets | Improve this Doc View Source Details What the user is currently doing. For example, \"Competitive - Total Mayhem\". Max 128 bytes Declaration [JsonPropertyName(\"details\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string Details { get; set; } Property Value Type Description System.String | Improve this Doc View Source Party The party the player is currently in. The ID must be set for this to be included in the RichPresence update. Declaration [JsonPropertyName(\"party\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public Party Party { get; set; } Property Value Type Description Party | Improve this Doc View Source Secrets The secrets used for Join / Spectate. Secrets are obfuscated data of your choosing. They could be match ids, player ids, lobby ids, etc. Make this object null if you do not wish too / unable to implement the Join / Request feature. To keep security on the up and up, Discord requires that you properly hash/encode/encrypt/put-a-padlock-on-and-swallow-the-key-but-wait-then-how-would-you-open-it your secrets. Visit the Rich Presence How-To for more information. Declaration [JsonPropertyName(\"secrets\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public Secrets Secrets { get; set; } Property Value Type Description Secrets | Improve this Doc View Source State The user's current Party status. For example, \"Playing Solo\" or \"With Friends\". Max 128 bytes Declaration [JsonPropertyName(\"state\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string State { get; set; } Property Value Type Description System.String | Improve this Doc View Source Timestamps The time elapsed / remaining time data. Declaration [JsonPropertyName(\"timestamps\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public Timestamps Timestamps { get; set; } Property Value Type Description Timestamps Methods | Improve this Doc View Source HasAssets() Does the Rich Presence have valid assets? Declaration public bool HasAssets() Returns Type Description System.Boolean | Improve this Doc View Source HasParty() Does the Rich Presence have a valid party? Declaration public bool HasParty() Returns Type Description System.Boolean | Improve this Doc View Source HasSecrets() Does the Rich Presence have valid secrets? Declaration public bool HasSecrets() Returns Type Description System.Boolean | Improve this Doc View Source HasTimestamps() Does the Rich Presence have valid timestamps? Declaration public bool HasTimestamps() Returns Type Description System.Boolean | Improve this Doc View Source ToRichPresence() Converts this BaseRichPresence to RichPresence Declaration public RichPresence ToRichPresence() Returns Type Description RichPresence Operators | Improve this Doc View Source Implicit(BaseRichPresence to Boolean) Operator that converts a presence into a boolean for null checks. Declaration public static implicit operator bool (BaseRichPresence presence) Parameters Type Name Description BaseRichPresence presence Returns Type Description System.Boolean"
  },
  "api/DiscordRPC.Button.html": {
    "href": "api/DiscordRPC.Button.html",
    "title": "Class Button | Discord RPC C#",
    "keywords": "Class Button A Rich Presence button. Inheritance System.Object Button Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public class Button Properties | Improve this Doc View Source Label Text shown on the button Max 32 bytes. Declaration [JsonPropertyName(\"label\")] public string Label { get; set; } Property Value Type Description System.String | Improve this Doc View Source Url The URL opened when clicking the button. Max 512 bytes. Declaration [JsonPropertyName(\"url\")] public string Url { get; set; } Property Value Type Description System.String"
  },
  "api/DiscordRPC.CloseEvent.html": {
    "href": "api/DiscordRPC.CloseEvent.html",
    "title": "Delegate CloseEvent | Discord RPC C#",
    "keywords": "Delegate CloseEvent Called when connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void CloseEvent(object sender, CloseMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event CloseMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Configuration.html": {
    "href": "api/DiscordRPC.Configuration.html",
    "title": "Class Configuration | Discord RPC C#",
    "keywords": "Class Configuration Configuration of the current RPC connection Inheritance System.Object Configuration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public class Configuration Properties | Improve this Doc View Source ApiEndpoint The Discord API endpoint that should be used. Declaration [JsonPropertyName(\"api_endpoint\")] public string ApiEndpoint { get; set; } Property Value Type Description System.String | Improve this Doc View Source CdnHost The CDN endpoint Declaration [JsonPropertyName(\"cdn_host\")] public string CdnHost { get; set; } Property Value Type Description System.String | Improve this Doc View Source Environment The type of environment the connection on. Usually Production. Declaration [JsonPropertyName(\"environment\")] public string Environment { get; set; } Property Value Type Description System.String"
  },
  "api/DiscordRPC.ConnectionEstablishedEvent.html": {
    "href": "api/DiscordRPC.ConnectionEstablishedEvent.html",
    "title": "Delegate ConnectionEstablishedEvent | Discord RPC C#",
    "keywords": "Delegate ConnectionEstablishedEvent The connection to the discord client was successful. This is called before ReadyEvent . Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void ConnectionEstablishedEvent(object sender, ConnectionEstablishedMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event ConnectionEstablishedMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.ConnectionFailedEvent.html": {
    "href": "api/DiscordRPC.ConnectionFailedEvent.html",
    "title": "Delegate ConnectionFailedEvent | Discord RPC C#",
    "keywords": "Delegate ConnectionFailedEvent Failed to establish any connection with discord. Discord is potentially not running? Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void ConnectionFailedEvent(object sender, ConnectionFailedMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event ConnectionFailedMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.DeviceObject.html": {
    "href": "api/DiscordRPC.DeviceObject.html",
    "title": "Class DeviceObject | Discord RPC C#",
    "keywords": "Class DeviceObject Represents a device object, containing information about an audio input or output device. Inheritance System.Object DeviceObject Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class DeviceObject Properties | Improve this Doc View Source Id Device identifier. Declaration [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Name of the device. Declaration [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/DiscordRPC.DiscordRpcClient.html": {
    "href": "api/DiscordRPC.DiscordRpcClient.html",
    "title": "Class DiscordRpcClient | Discord RPC C#",
    "keywords": "Class DiscordRpcClient A Discord RPC Client which is used to send Rich Presence updates and receive Join / Spectate events. Inheritance System.Object DiscordRpcClient Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public sealed class DiscordRpcClient : IDisposable Constructors | Improve this Doc View Source DiscordRpcClient(String, Int32, ILogger, Boolean, INamedPipeClient) Creates a new Discord RPC Client which can be used to send Rich Presence and receive Join / Spectate events. This constructor exposes more advance features such as custom NamedPipeClients and Loggers. Declaration public DiscordRpcClient(string applicationID, int pipe = -1, ILogger logger = null, bool autoEvents = true, INamedPipeClient client = null) Parameters Type Name Description System.String applicationID The ID of the application created at discord's developers portal. System.Int32 pipe The pipe to connect too. If -1, then the client will scan for the first available instance of Discord. ILogger logger The logger used to report messages. If null, then a NullLogger will be created and logs will be ignored. System.Boolean autoEvents Should events be automatically invoked from the RPC Thread as they arrive from discord? INamedPipeClient client The pipe client to use and communicate to discord through. If null, the default ManagedNamedPipeClient will be used. Properties | Improve this Doc View Source CurrentUser The current discord user. This is updated with the ready event and will be null until the event is fired from the connection. Declaration public User CurrentUser { get; } Property Value Type Description User | Improve this Doc View Source Logger The logger used this client and its associated components. ILogger are not called safely and can come from any thread. It is upto the ILogger to account for this and apply appropriate thread safe methods. Declaration public ILogger Logger { get; set; } Property Value Type Description ILogger | Improve this Doc View Source MaxQueueSize The maximum size of the message queue received from Discord. Declaration public int MaxQueueSize { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ShutdownOnly Forces the connection to shut down gracefully instead of just aborting the connection. This option helps prevents ghosting in applications where the Process ID is a host and the game is executed within the host (ie: the Unity3D editor). This will tell Discord that we have no presence, and we are closing the connection manually, instead of waiting for the process to terminate. Declaration public bool ShutdownOnly { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SteamID Gets the Steam ID of the RPC Client. This value can be null if none was supplied. Declaration public string SteamID { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Authenticate(String) Used to authenticate a new client with your app. Declaration public void Authenticate(string accessToken) Parameters Type Name Description System.String accessToken The OAuth2 access token. | Improve this Doc View Source Authorize(String, String[]) Used to authenticate a new client with your app. By default, this pops up a modal in-app that asks the user to authorize access to your app. Declaration public void Authorize(string clientID, params string[] scopes) Parameters Type Name Description System.String clientID The OAuth2 application id. System.String [] scopes The scopes to authorize. | Improve this Doc View Source ClearPresence() Clears the Rich Presence. Use this just before disposal to prevent ghosting. Declaration public void ClearPresence() | Improve this Doc View Source Dispose() Terminates the connection to Discord and disposes of the object. Declaration public void Dispose() | Improve this Doc View Source GetVoiceSettings() Gets the voice settings for the Discord RPC client. Declaration public void GetVoiceSettings() Exceptions Type Condition System.ObjectDisposedException Thrown if the Discord RPC client has been disposed. System.ObjectDisposedException Thrown if the connection to Discord has been deinitialized. UninitializedException Thrown if the Discord RPC client has not been initialized. | Improve this Doc View Source Initialize() Attempts to initialize a connection to the Discord IPC. Declaration public bool Initialize() Returns Type Description System.Boolean | Improve this Doc View Source Invoke() Dequeues all the messages from Discord, processes them and then invoke appropriate event handlers. This will process the message and update the internal state before invoking the events. Returns the messages that were invoked in the order they were invoked. This method cannot be used if DiscordRPC.DiscordRpcClient.AutoEvents is enabled. Declaration public Message[] Invoke() Returns Type Description Message [] Returns the messages that were invoked and in the order they were invoked. | Improve this Doc View Source RegisterUriScheme(String, String) Registers the application executable to a custom URI Scheme. This is required for the Join and Spectate features. Discord will run this custom URI Scheme to launch your application when a user presses either of the buttons. Declaration public bool RegisterUriScheme(string steamAppID = null, string executable = null) Parameters Type Name Description System.String steamAppID Optional Steam ID. If supplied, Discord will launch the game through steam instead of directly calling it. System.String executable The path to the executable. If null, the path to the current executable will be used instead. Returns Type Description System.Boolean | Improve this Doc View Source Respond(JoinRequestMessage, Boolean) Respond to a Join Request. All requests will time out after 30 seconds. Because of the 30-second timeout, it is recommended to call Invoke() faster than every 15 seconds to give your users adequate time to respond to the request. Declaration public void Respond(JoinRequestMessage request, bool acceptRequest) Parameters Type Name Description JoinRequestMessage request The request that is being responded too. System.Boolean acceptRequest Accept the join request. | Improve this Doc View Source SetButton(Button, Int32) Updates only the Buttons of the DiscordRPC.DiscordRpcClient.CurrentPresence and updates the button with the given index. Returns the newly edited Rich Presence. Declaration public RichPresence SetButton(Button button, int index = 0) Parameters Type Name Description Button button The buttons of the Rich Presence System.Int32 index The number of the button Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source SetPresence(RichPresence) Sets the Rich Presence. Declaration public void SetPresence(RichPresence presence) Parameters Type Name Description RichPresence presence The Rich Presence to set on the current Discord user. | Improve this Doc View Source SetSubscription(EventType) Sets the subscription to the events sent from Discord. Requires the UriScheme to be registered. Declaration public void SetSubscription(EventType type) Parameters Type Name Description EventType type The new subscription as a flag. Events selected in the flag will be subscribed too and the other events will be unsubscribed. | Improve this Doc View Source SetVoiceSettings(VoiceSettings) Sets the voice settings for the Discord RPC client. Declaration public void SetVoiceSettings(VoiceSettings voiceSettings) Parameters Type Name Description VoiceSettings voiceSettings The VoiceSettings object containing the new voice settings to apply. Exceptions Type Condition System.ObjectDisposedException Thrown if the Discord RPC client has been disposed. System.ObjectDisposedException Thrown if the connection to Discord has been deinitialized. UninitializedException Thrown if the Discord RPC client has not been initialized. | Improve this Doc View Source Subscribe(EventType) Subscribes to an event sent from discord. Used for Join / Spectate feature. Requires the UriScheme to be registered. Declaration public void Subscribe(EventType type) Parameters Type Name Description EventType type The event type to subscribe to | Improve this Doc View Source Unsubscribe(EventType) Unsubscribe from the event sent by discord. Used for Join / Spectate feature. Requires the UriScheme to be registered. Declaration public void Unsubscribe(EventType type) Parameters Type Name Description EventType type The event type to unsubscribe from | Improve this Doc View Source UpdateButtons(Button[]) Updates only the Buttons of the DiscordRPC.DiscordRpcClient.CurrentPresence and updates/removes the buttons. Returns the newly edited Rich Presence. Declaration public RichPresence UpdateButtons(Button[] button = null) Parameters Type Name Description Button [] button The buttons of the Rich Presence Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdateClearTime() Sets the start and end time of DiscordRPC.DiscordRpcClient.CurrentPresence to null and sends it to Discord. Declaration public RichPresence UpdateClearTime() Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdateDetails(String) Updates only the Details of the DiscordRPC.DiscordRpcClient.CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. Declaration public RichPresence UpdateDetails(string details) Parameters Type Name Description System.String details The details of the Rich Presence Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdateEndTime() Sets the end time of the DiscordRPC.DiscordRpcClient.CurrentPresence to now and sends the updated presence to Discord. Declaration public RichPresence UpdateEndTime() Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdateLargeAsset(String, String) Updates the large Assets of the DiscordRPC.DiscordRpcClient.CurrentPresence and sends the updated presence to Discord. Both key and tooltip are optional and will be ignored it null. Declaration public RichPresence UpdateLargeAsset(string key = null, string tooltip = null) Parameters Type Name Description System.String key Optional: The new key to set the asset too System.String tooltip Optional: The new tooltip to display on the asset Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdateParty(Party) Updates only the Party of the DiscordRPC.DiscordRpcClient.CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. Declaration public RichPresence UpdateParty(Party party) Parameters Type Name Description Party party The party of the Rich Presence Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdatePartySize(Int32) Updates the CurrentSize of the DiscordRPC.DiscordRpcClient.CurrentPresence and sends the update presence to Discord. Returns the newly edited Rich Presence. Will return null if no presence exists and will throw a new System.NullReferenceException if the Party does not exist. Declaration public RichPresence UpdatePartySize(int size) Parameters Type Name Description System.Int32 size The new size of the party. It cannot be greater than Max Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdatePartySize(Int32, Int32) Updates the CurrentSize of the DiscordRPC.DiscordRpcClient.CurrentPresence and sends the update presence to Discord. Returns the newly edited Rich Presence. Will return null if no presence exists and will throw a new System.NullReferenceException if the Party does not exist. Declaration public RichPresence UpdatePartySize(int size, int max) Parameters Type Name Description System.Int32 size The new size of the party. It cannot be greater than Max System.Int32 max The new size of the party. It cannot be smaller than CurrentSize Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdateSecrets(Secrets) Updates the Secrets of the DiscordRPC.DiscordRpcClient.CurrentPresence and sends the updated presence to Discord. Will override previous secret entirely. Declaration public RichPresence UpdateSecrets(Secrets secrets) Parameters Type Name Description Secrets secrets The new secret to send to discord. Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdateSmallAsset(String, String) Updates the small Assets of the DiscordRPC.DiscordRpcClient.CurrentPresence and sends the updated presence to Discord. Both key and tooltip are optional and will be ignored it null. Declaration public RichPresence UpdateSmallAsset(string key = null, string tooltip = null) Parameters Type Name Description System.String key Optional: The new key to set the asset too System.String tooltip Optional: The new tooltip to display on the asset Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdateStartTime() Sets the start time of the DiscordRPC.DiscordRpcClient.CurrentPresence to now and sends the updated presence to Discord. Declaration public RichPresence UpdateStartTime() Returns Type Description RichPresence Updated Rich Presence | Improve this Doc View Source UpdateState(String) Updates only the State of the DiscordRPC.DiscordRpcClient.CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. Declaration public RichPresence UpdateState(string state) Parameters Type Name Description System.String state The state of the Rich Presence Returns Type Description RichPresence Updated Rich Presence Events | Improve this Doc View Source OnAuthenticate Called when the discord client has received an Authenticate response. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event AuthenticateEvent OnAuthenticate Event Type Type Description AuthenticateEvent | Improve this Doc View Source OnAuthorize Called when the discord client has received an Authorize response. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event AuthorizeEvent OnAuthorize Event Type Type Description AuthorizeEvent | Improve this Doc View Source OnClose Called when connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event CloseEvent OnClose Event Type Type Description CloseEvent | Improve this Doc View Source OnConnectionEstablished The connection to the discord client was successful. This is called before Ready . If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event ConnectionEstablishedEvent OnConnectionEstablished Event Type Type Description ConnectionEstablishedEvent | Improve this Doc View Source OnConnectionFailed Failed to establish any connection with discord. Discord is potentially not running? If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event ConnectionFailedEvent OnConnectionFailed Event Type Type Description ConnectionFailedEvent | Improve this Doc View Source OnError Called when an error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event ErrorEvent OnError Event Type Type Description ErrorEvent | Improve this Doc View Source OnJoin Called when the Discord Client wishes for this process to join a game. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event JoinEvent OnJoin Event Type Type Description JoinEvent | Improve this Doc View Source OnJoinRequested Called when another discord user requests permission to join this game. This event is not invoked until Invoke() is executed. Declaration public event JoinRequestedEvent OnJoinRequested Event Type Type Description JoinRequestedEvent | Improve this Doc View Source OnPresenceUpdate Called when the Discord Client has updated the presence. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event PresenceUpdateEvent OnPresenceUpdate Event Type Type Description PresenceUpdateEvent | Improve this Doc View Source OnReady Called when the discord client is ready to send and receive messages. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event ReadyEvent OnReady Event Type Type Description ReadyEvent | Improve this Doc View Source OnRpcMessage The RPC Connection has sent a message. Called before any other event and executed from the RPC Thread. Declaration public event RpcMessageEvent OnRpcMessage Event Type Type Description RpcMessageEvent | Improve this Doc View Source OnSpectate Called when the Discord Client wishes for this process to spectate a game. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event SpectateEvent OnSpectate Event Type Type Description SpectateEvent | Improve this Doc View Source OnSubscribe Called when the Discord Client has subscribed to an event. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event SubscribeEvent OnSubscribe Event Type Type Description SubscribeEvent | Improve this Doc View Source OnUnsubscribe Called when the Discord Client has unsubscribed from an event. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event UnsubscribeEvent OnUnsubscribe Event Type Type Description UnsubscribeEvent | Improve this Doc View Source OnVoiceSettings Called when the discord client has received an Authenticate response. If DiscordRPC.DiscordRpcClient.AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked until Invoke() and will be on the calling thread. Declaration public event VoiceSettingsEvent OnVoiceSettings Event Type Type Description VoiceSettingsEvent Implements System.IDisposable"
  },
  "api/DiscordRPC.ErrorEvent.html": {
    "href": "api/DiscordRPC.ErrorEvent.html",
    "title": "Delegate ErrorEvent | Discord RPC C#",
    "keywords": "Delegate ErrorEvent Called when a error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void ErrorEvent(object sender, ErrorMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event ErrorMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.EventType.html": {
    "href": "api/DiscordRPC.EventType.html",
    "title": "Enum EventType | Discord RPC C#",
    "keywords": "Enum EventType The type of event received by the RPC. A flag type that can be combined. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Flags] public enum EventType Fields Name Description Join Called when the Discord Client wishes to enter a game to play. JoinRequest Called when another Discord Client has requested permission to join this game. None No event Spectate Called when the Discord Client wishes to enter a game to spectate"
  },
  "api/DiscordRPC.Exceptions.BadPresenceException.html": {
    "href": "api/DiscordRPC.Exceptions.BadPresenceException.html",
    "title": "Class BadPresenceException | Discord RPC C#",
    "keywords": "Class BadPresenceException A BadPresenceException is thrown when invalid, incompatible or conflicting properties and is unable to be sent. Inheritance System.Object System.Exception BadPresenceException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : DiscordRPC.Exceptions Assembly : DiscordRPC.dll Syntax public class BadPresenceException : Exception, ISerializable Implements System.Runtime.Serialization.ISerializable"
  },
  "api/DiscordRPC.Exceptions.html": {
    "href": "api/DiscordRPC.Exceptions.html",
    "title": "Namespace DiscordRPC.Exceptions | Discord RPC C#",
    "keywords": "Namespace DiscordRPC.Exceptions Classes BadPresenceException A BadPresenceException is thrown when invalid, incompatible or conflicting properties and is unable to be sent. InvalidConfigurationException A InvalidConfigurationException is thrown when trying to perform an action that conflicts with the current configuration. InvalidPipeException The exception that is thrown when an error occurs while communicating with a pipe or when a connection attempt fails. StringOutOfRangeException A StringOutOfRangeException is thrown when the length of a string exceeds the allowed limit. UninitializedException Thrown when an action is performed on a client that has not yet been initialized"
  },
  "api/DiscordRPC.Exceptions.InvalidConfigurationException.html": {
    "href": "api/DiscordRPC.Exceptions.InvalidConfigurationException.html",
    "title": "Class InvalidConfigurationException | Discord RPC C#",
    "keywords": "Class InvalidConfigurationException A InvalidConfigurationException is thrown when trying to perform an action that conflicts with the current configuration. Inheritance System.Object System.Exception InvalidConfigurationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : DiscordRPC.Exceptions Assembly : DiscordRPC.dll Syntax public class InvalidConfigurationException : Exception, ISerializable Implements System.Runtime.Serialization.ISerializable"
  },
  "api/DiscordRPC.Exceptions.InvalidPipeException.html": {
    "href": "api/DiscordRPC.Exceptions.InvalidPipeException.html",
    "title": "Class InvalidPipeException | Discord RPC C#",
    "keywords": "Class InvalidPipeException The exception that is thrown when an error occurs while communicating with a pipe or when a connection attempt fails. Inheritance System.Object System.Exception InvalidPipeException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : DiscordRPC.Exceptions Assembly : DiscordRPC.dll Syntax [Obsolete(\"Not actually used anywhere\")] public class InvalidPipeException : Exception, ISerializable Implements System.Runtime.Serialization.ISerializable"
  },
  "api/DiscordRPC.Exceptions.StringOutOfRangeException.html": {
    "href": "api/DiscordRPC.Exceptions.StringOutOfRangeException.html",
    "title": "Class StringOutOfRangeException | Discord RPC C#",
    "keywords": "Class StringOutOfRangeException A StringOutOfRangeException is thrown when the length of a string exceeds the allowed limit. Inheritance System.Object System.Exception StringOutOfRangeException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : DiscordRPC.Exceptions Assembly : DiscordRPC.dll Syntax public class StringOutOfRangeException : Exception, ISerializable Properties | Improve this Doc View Source MaximumLength Maximum length the string is allowed to be. Declaration public int MaximumLength { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MinimumLength Minimum length the string is allowed to be. Declaration public int MinimumLength { get; } Property Value Type Description System.Int32 Implements System.Runtime.Serialization.ISerializable"
  },
  "api/DiscordRPC.Exceptions.UninitializedException.html": {
    "href": "api/DiscordRPC.Exceptions.UninitializedException.html",
    "title": "Class UninitializedException | Discord RPC C#",
    "keywords": "Class UninitializedException Thrown when an action is performed on a client that has not yet been initialized Inheritance System.Object System.Exception UninitializedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : DiscordRPC.Exceptions Assembly : DiscordRPC.dll Syntax public class UninitializedException : Exception, ISerializable Implements System.Runtime.Serialization.ISerializable"
  },
  "api/DiscordRPC.Helper.DiscordOAuth.html": {
    "href": "api/DiscordRPC.Helper.DiscordOAuth.html",
    "title": "Class DiscordOAuth | Discord RPC C#",
    "keywords": "Class DiscordOAuth Helper class for Discord OAuth2 authorization. Inheritance System.Object DiscordOAuth Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Helper Assembly : DiscordRPC.dll Syntax public static class DiscordOAuth Methods | Improve this Doc View Source ExchangeCodeAsync(String) OAuth2 authorization code is now exchanged for the user's access token by making a POST request to the token URL with the following parameters: grant_type - must be set to authorization_code redirect_uri - the redirect_uri associated with this authorization, usually from your authorization URL Declaration public static async Task<bool> ExchangeCodeAsync(string code) Parameters Type Name Description System.String code the OAuth2 authorization code from the querystring Returns Type Description System.Threading.Tasks.Task < System.Boolean > | Improve this Doc View Source LoadOAuthData(String) Loads OAuth data from a specified file path. Declaration public static Option<Dictionary<string, object>> LoadOAuthData(string filePath = \"discordOauth.json\") Parameters Type Name Description System.String filePath The file path from which to load the OAuth data. Returns Type Description Option < System.Collections.Generic.Dictionary < System.String , System.Object >> An indicating the success or failure of the operation. Returns if the data is successfully loaded, otherwise returns . | Improve this Doc View Source SetClientData(String, String) Sets the client data for the Discord application. Declaration public static void SetClientData(string clientId, string clientSecret) Parameters Type Name Description System.String clientId System.String clientSecret | Improve this Doc View Source TryRefreshToken() Tries to refresh the token if the refresh token is available. Declaration public static async Task<bool> TryRefreshToken() Returns Type Description System.Threading.Tasks.Task < System.Boolean > True if the token was successfully refreshed, otherwise false."
  },
  "api/DiscordRPC.Helper.html": {
    "href": "api/DiscordRPC.Helper.html",
    "title": "Namespace DiscordRPC.Helper | Discord RPC C#",
    "keywords": "Namespace DiscordRPC.Helper Classes DiscordOAuth Helper class for Discord OAuth2 authorization. None<T> Represents an option with no value. Option<T> Represents an abstract option type that encapsulates an optional value. Some<T> Represents an option containing a value. StringTools Collectin of helpful string extensions"
  },
  "api/DiscordRPC.Helper.None-1.html": {
    "href": "api/DiscordRPC.Helper.None-1.html",
    "title": "Class None<T> | Discord RPC C#",
    "keywords": "Class None<T> Represents an option with no value. Inheritance System.Object Option <T> None<T> Inherited Members Option<T>.Some(T) Option<T>.None() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Helper Assembly : DiscordRPC.dll Syntax public class None<T> : Option<T> Type Parameters Name Description T The type of the absent value. Properties | Improve this Doc View Source IsNone Gets a value indicating that this instance represents the absence of a value. Declaration public override bool IsNone { get; } Property Value Type Description System.Boolean Overrides DiscordRPC.Helper.Option<T>.IsNone | Improve this Doc View Source IsSome Gets a value indicating that this instance does not contain a value. Declaration public override bool IsSome { get; } Property Value Type Description System.Boolean Overrides DiscordRPC.Helper.Option<T>.IsSome | Improve this Doc View Source Value Gets the value of the option, which in this case throws an exception because there is no value. Declaration public override T Value { get; } Property Value Type Description T Overrides DiscordRPC.Helper.Option<T>.Value Exceptions Type Condition System.InvalidOperationException Thrown to indicate that no value is present."
  },
  "api/DiscordRPC.Helper.Option-1.html": {
    "href": "api/DiscordRPC.Helper.Option-1.html",
    "title": "Class Option<T> | Discord RPC C#",
    "keywords": "Class Option<T> Represents an abstract option type that encapsulates an optional value. Inheritance System.Object Option<T> None <T> Some <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Helper Assembly : DiscordRPC.dll Syntax public abstract class Option<T> Type Parameters Name Description T The type of the value to be encapsulated. Properties | Improve this Doc View Source IsNone Gets a value indicating whether the option does not contain a value. Declaration public abstract bool IsNone { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSome Gets a value indicating whether the option contains a value. Declaration public abstract bool IsSome { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Gets the value encapsulated by the option. Declaration public abstract T Value { get; } Property Value Type Description T Exceptions Type Condition System.InvalidOperationException Thrown when the option is a None<T> . Methods | Improve this Doc View Source None() Creates a None<T> instance representing the absence of a value. Declaration public static Option<T> None() Returns Type Description Option <T> A None<T> instance. | Improve this Doc View Source Some(T) Creates a Some<T> instance containing the provided value. Declaration public static Option<T> Some(T value) Parameters Type Name Description T value The value to encapsulate. Returns Type Description Option <T> A Some<T> instance containing the value."
  },
  "api/DiscordRPC.Helper.Some-1.html": {
    "href": "api/DiscordRPC.Helper.Some-1.html",
    "title": "Class Some<T> | Discord RPC C#",
    "keywords": "Class Some<T> Represents an option containing a value. Inheritance System.Object Option <T> Some<T> Inherited Members Option<T>.Some(T) Option<T>.None() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Helper Assembly : DiscordRPC.dll Syntax public class Some<T> : Option<T> Type Parameters Name Description T The type of the value. Constructors | Improve this Doc View Source Some(T) Initializes a new instance of the Some<T> class with the specified value. Declaration public Some(T value) Parameters Type Name Description T value The value to encapsulate. Properties | Improve this Doc View Source IsNone Gets a value indicating that this instance does not represent the absence of a value. Declaration public override bool IsNone { get; } Property Value Type Description System.Boolean Overrides DiscordRPC.Helper.Option<T>.IsNone | Improve this Doc View Source IsSome Gets a value indicating that this instance contains a value. Declaration public override bool IsSome { get; } Property Value Type Description System.Boolean Overrides DiscordRPC.Helper.Option<T>.IsSome | Improve this Doc View Source Value Gets the encapsulated value. Declaration public override T Value { get; } Property Value Type Description T Overrides DiscordRPC.Helper.Option<T>.Value"
  },
  "api/DiscordRPC.Helper.StringTools.html": {
    "href": "api/DiscordRPC.Helper.StringTools.html",
    "title": "Class StringTools | Discord RPC C#",
    "keywords": "Class StringTools Collectin of helpful string extensions Inheritance System.Object StringTools Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Helper Assembly : DiscordRPC.dll Syntax public static class StringTools Methods | Improve this Doc View Source GetNullOrString(String) Will return null if the string is whitespace, otherwise it will return the string. Declaration public static string GetNullOrString(this string str) Parameters Type Name Description System.String str The string to check Returns Type Description System.String Null if the string is empty, otherwise the string | Improve this Doc View Source ToCamelCase(String) Converts the string into UpperCamelCase (Pascal Case). Declaration public static string ToCamelCase(this string str) Parameters Type Name Description System.String str The string to convert Returns Type Description System.String | Improve this Doc View Source ToSnakeCase(String) Converts the string into UPPER_SNAKE_CASE Declaration public static string ToSnakeCase(this string str) Parameters Type Name Description System.String str The string to convert Returns Type Description System.String | Improve this Doc View Source WithinLength(String, Int32) Does the string fit within the given amount of bytes? Uses UTF8 encoding. Declaration public static bool WithinLength(this string str, int bytes) Parameters Type Name Description System.String str The string to check System.Int32 bytes The maximum number of bytes the string can take up Returns Type Description System.Boolean True if the string fits within the number of bytes | Improve this Doc View Source WithinLength(String, Int32, Encoding) Does the string fit within the given amount of bytes? Declaration public static bool WithinLength(this string str, int bytes, Encoding encoding) Parameters Type Name Description System.String str The string to check System.Int32 bytes The maximum number of bytes the string can take up System.Text.Encoding encoding The encoding to count the bytes with Returns Type Description System.Boolean True if the string fits within the number of bytes"
  },
  "api/DiscordRPC.html": {
    "href": "api/DiscordRPC.html",
    "title": "Namespace DiscordRPC | Discord RPC C#",
    "keywords": "Namespace DiscordRPC Classes Application Object representing a Discord application Assets Information about the pictures used in the Rich Presence. BaseRichPresence The base rich presence structure Button A Rich Presence button. Configuration Configuration of the current RPC connection DeviceObject Represents a device object, containing information about an audio input or output device. DiscordRpcClient A Discord RPC Client which is used to send Rich Presence updates and receive Join / Spectate events. Party Structure representing the part the player is in. RichPresence The Rich Presence structure that will be sent and received by Discord. Use this class to build your presence and update it appropriately. Secrets The secrets used for Join / Spectate. Secrets are obfuscated data of your choosing. They could be match ids, player ids, lobby ids, etc. To keep security on the up and up, Discord requires that you properly hash/encode/encrypt/put-a-padlock-on-and-swallow-the-key-but-wait-then-how-would-you-open-it your secrets. You should send discord data that someone else's game client would need to join or spectate their friend. If you can't or don't want to support those actions, you don't need to send secrets. Visit the Rich Presence How-To for more information. ShortcutKeyCombo Represents a shortcut key combination for triggering actions like push-to-talk. Timestamps Structure representing the start and end times of a match. User Object representing a Discord user. This is used for join requests. VoiceSettings Represents the structure for the Get Voice Settings response. VoiceSettingsInput Represents the input settings for voice. VoiceSettingsMode Represents the voice settings mode object for the Get Voice Settings response. VoiceSettingsOutput Represents the output settings for voice. Enums EventType The type of event received by the RPC. A flag type that can be combined. Party.PrivacySetting Privacy of the party User.AvatarFormat Possible formats for avatars User.AvatarSize Possible square sizes of avatars. User.Flag A flag on the user account User.PremiumType Type of premium Delegates AuthenticateEvent Called when the Discord Client has received an Authenticate Response. AuthorizeEvent Called when the Discord Client has received an Authorize Response. CloseEvent Called when connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. ConnectionEstablishedEvent The connection to the discord client was successful. This is called before ReadyEvent . ConnectionFailedEvent Failed to establish any connection with discord. Discord is potentially not running? ErrorEvent Called when a error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. JoinEvent Called when the Discord Client wishes for this process to join a game. JoinRequestedEvent Called when another discord user requests permission to join this game. PresenceUpdateEvent Called when the Discord Client has updated the presence. ReadyEvent Called when the Discord Client is ready to send and receive messages. RpcMessageEvent A RPC Message is received. SpectateEvent Called when the Discord Client wishes for this process to spectate a game. SubscribeEvent Called when the Discord Client has subscribed to an event. UnsubscribeEvent Called when the Discord Client has unsubscribed from an event. VoiceSettingsEvent Called when the Discord Client has sent an SetVoiceSettings Response."
  },
  "api/DiscordRPC.IO.html": {
    "href": "api/DiscordRPC.IO.html",
    "title": "Namespace DiscordRPC.IO | Discord RPC C#",
    "keywords": "Namespace DiscordRPC.IO Classes ManagedNamedPipeClient A named pipe client using the .NET framework System.IO.Pipes.NamedPipeClientStream Structs PipeFrame A frame received and sent to the Discord client for RPC communications. Interfaces INamedPipeClient Pipe Client used to communicate with Discord. Enums Opcode The operation code that the PipeFrame was sent under. This defines the type of frame and the data to expect."
  },
  "api/DiscordRPC.IO.INamedPipeClient.html": {
    "href": "api/DiscordRPC.IO.INamedPipeClient.html",
    "title": "Interface INamedPipeClient | Discord RPC C#",
    "keywords": "Interface INamedPipeClient Pipe Client used to communicate with Discord. Inherited Members System.IDisposable.Dispose() Namespace : DiscordRPC.IO Assembly : DiscordRPC.dll Syntax public interface INamedPipeClient : IDisposable Properties | Improve this Doc View Source ConnectedPipe The pipe the client is currently connected too Declaration int ConnectedPipe { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsConnected Is the pipe client currently connected? Declaration bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Logger The logger for the Pipe client to use Declaration ILogger Logger { get; set; } Property Value Type Description ILogger Methods | Improve this Doc View Source Close() Closes the connection Declaration void Close() | Improve this Doc View Source Connect(Int32) Attempts to connect to the pipe. If 0-9 is passed to pipe, it should try to only connect to the specified pipe. If -1 is passed, the pipe will find the first available pipe. Declaration bool Connect(int pipe) Parameters Type Name Description System.Int32 pipe If -1 is passed, the pipe will find the first available pipe, otherwise it connects to the pipe that was supplied Returns Type Description System.Boolean | Improve this Doc View Source ReadFrame(out PipeFrame) Reads a frame if there is one available. Returns false if there is none. This should be non blocking (aka use a Peek first). Declaration bool ReadFrame(out PipeFrame frame) Parameters Type Name Description PipeFrame frame The frame that has been read. Will be default(PipeFrame) if it fails to read Returns Type Description System.Boolean Returns true if a frame has been read, otherwise false. | Improve this Doc View Source WriteFrame(PipeFrame) Writes the frame to the pipe. Returns false if any errors occur. Declaration bool WriteFrame(PipeFrame frame) Parameters Type Name Description PipeFrame frame The frame to be written Returns Type Description System.Boolean"
  },
  "api/DiscordRPC.IO.ManagedNamedPipeClient.html": {
    "href": "api/DiscordRPC.IO.ManagedNamedPipeClient.html",
    "title": "Class ManagedNamedPipeClient | Discord RPC C#",
    "keywords": "Class ManagedNamedPipeClient A named pipe client using the .NET framework System.IO.Pipes.NamedPipeClientStream Inheritance System.Object ManagedNamedPipeClient Implements INamedPipeClient System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.IO Assembly : DiscordRPC.dll Syntax public sealed class ManagedNamedPipeClient : INamedPipeClient, IDisposable Constructors | Improve this Doc View Source ManagedNamedPipeClient() Creates a new instance of a Managed NamedPipe client. Doesn't connect to anything yet, just setups the values. Declaration public ManagedNamedPipeClient() Properties | Improve this Doc View Source ConnectedPipe The pipe we are currently connected too. Declaration public int ConnectedPipe { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsConnected Checks if the client is connected Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Logger The logger for the Pipe client to use Declaration public ILogger Logger { get; set; } Property Value Type Description ILogger Methods | Improve this Doc View Source Close() Closes the pipe Declaration public void Close() | Improve this Doc View Source Connect(Int32) Connects to the pipe Declaration public bool Connect(int pipe) Parameters Type Name Description System.Int32 pipe Returns Type Description System.Boolean | Improve this Doc View Source Dispose() Disposes of the stream Declaration public void Dispose() | Improve this Doc View Source GetPipeName(Int32) returns a platform specific path that Discord is hosting the IPC on. Declaration public static string GetPipeName(int pipe) Parameters Type Name Description System.Int32 pipe The pipe number Returns Type Description System.String | Improve this Doc View Source ReadFrame(out PipeFrame) Reads a frame, returning false if none are available Declaration public bool ReadFrame(out PipeFrame frame) Parameters Type Name Description PipeFrame frame Returns Type Description System.Boolean | Improve this Doc View Source WriteFrame(PipeFrame) Writes a frame to the pipe Declaration public bool WriteFrame(PipeFrame frame) Parameters Type Name Description PipeFrame frame Returns Type Description System.Boolean Implements INamedPipeClient System.IDisposable"
  },
  "api/DiscordRPC.IO.Opcode.html": {
    "href": "api/DiscordRPC.IO.Opcode.html",
    "title": "Enum Opcode | Discord RPC C#",
    "keywords": "Enum Opcode The operation code that the PipeFrame was sent under. This defines the type of frame and the data to expect. Namespace : DiscordRPC.IO Assembly : DiscordRPC.dll Syntax public enum Opcode : uint Fields Name Description Close Discord has closed the connection Frame Generic message frame Handshake Initial handshake frame Ping Ping frame (not used?) Pong Pong frame (not used?)"
  },
  "api/DiscordRPC.IO.PipeFrame.html": {
    "href": "api/DiscordRPC.IO.PipeFrame.html",
    "title": "Struct PipeFrame | Discord RPC C#",
    "keywords": "Struct PipeFrame A frame received and sent to the Discord client for RPC communications. Implements System.IEquatable < PipeFrame > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : DiscordRPC.IO Assembly : DiscordRPC.dll Syntax public struct PipeFrame : IEquatable<PipeFrame> Constructors | Improve this Doc View Source PipeFrame(Opcode, Object) Creates a new pipe frame instance Declaration public PipeFrame(Opcode opcode, object data) Parameters Type Name Description Opcode opcode The opcode of the frame System.Object data The data of the frame that will be serialized as JSON Fields | Improve this Doc View Source MaxSize The maximum size of a pipe frame (16kb). Declaration public const int MaxSize = 16384 Field Value Type Description System.Int32 Properties | Improve this Doc View Source Data The data in the frame Declaration public byte[] Data { readonly get; } Property Value Type Description System.Byte [] | Improve this Doc View Source Message The data represented as a string. Declaration public string Message { get; set; } Property Value Type Description System.String | Improve this Doc View Source Opcode The opcode of the frame Declaration public Opcode Opcode { readonly get; set; } Property Value Type Description Opcode Methods | Improve this Doc View Source Equals(PipeFrame) Compares if the frame equals the other frame. Declaration public bool Equals(PipeFrame other) Parameters Type Name Description PipeFrame other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetObject<T>() Deserializes the data into the supplied type using JSON. Declaration public T GetObject<T>() where T : class Returns Type Description T Type Parameters Name Description T The type to deserialize into | Improve this Doc View Source ReadStream(Stream) Attempts to read the contents of the frame from the stream Declaration public bool ReadStream(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description System.Boolean | Improve this Doc View Source SetObject(Opcode, Object) Sets the opcodes and serializes the object into a json string. Declaration public void SetObject(Opcode opcode, object obj) Parameters Type Name Description Opcode opcode System.Object obj | Improve this Doc View Source WriteStream(Stream) Writes the frame into the target frame as one big byte block. Declaration public void WriteStream(Stream stream) Parameters Type Name Description System.IO.Stream stream Implements System.IEquatable<T>"
  },
  "api/DiscordRPC.JoinEvent.html": {
    "href": "api/DiscordRPC.JoinEvent.html",
    "title": "Delegate JoinEvent | Discord RPC C#",
    "keywords": "Delegate JoinEvent Called when the Discord Client wishes for this process to join a game. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void JoinEvent(object sender, JoinMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event JoinMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.JoinRequestedEvent.html": {
    "href": "api/DiscordRPC.JoinRequestedEvent.html",
    "title": "Delegate JoinRequestedEvent | Discord RPC C#",
    "keywords": "Delegate JoinRequestedEvent Called when another discord user requests permission to join this game. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void JoinRequestedEvent(object sender, JoinRequestMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event JoinRequestMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Logging.ConsoleLogger.html": {
    "href": "api/DiscordRPC.Logging.ConsoleLogger.html",
    "title": "Class ConsoleLogger | Discord RPC C#",
    "keywords": "Class ConsoleLogger Logs the outputs to the console using System.Console.WriteLine Inheritance System.Object ConsoleLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Logging Assembly : DiscordRPC.dll Syntax public class ConsoleLogger : ILogger Constructors | Improve this Doc View Source ConsoleLogger() Creates a new instance of a Console Logger. Declaration public ConsoleLogger() | Improve this Doc View Source ConsoleLogger(LogLevel) Creates a new instance of a Console Logger Declaration public ConsoleLogger(LogLevel level) Parameters Type Name Description LogLevel level The log level | Improve this Doc View Source ConsoleLogger(LogLevel, Boolean) Creates a new instance of a Console Logger with a set log level Declaration public ConsoleLogger(LogLevel level, bool coloured) Parameters Type Name Description LogLevel level The log level System.Boolean coloured Should the logs be in colour? Properties | Improve this Doc View Source Colored An alias too DiscordRPC.Logging.ConsoleLogger.Coloured Declaration [Obsolete(\"Use Coloured\")] public bool Colored { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Level The level of logging to apply to this logger. Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel Methods | Improve this Doc View Source Error(String, Object[]) Error log messages Declaration public void Error(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Info(String, Object[]) Informative log messages Declaration public void Info(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Trace(String, Object[]) Informative log messages Declaration public void Trace(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Warning(String, Object[]) Warning log messages Declaration public void Warning(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args Implements ILogger"
  },
  "api/DiscordRPC.Logging.FileLogger.html": {
    "href": "api/DiscordRPC.Logging.FileLogger.html",
    "title": "Class FileLogger | Discord RPC C#",
    "keywords": "Class FileLogger Logs the outputs to a file Inheritance System.Object FileLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Logging Assembly : DiscordRPC.dll Syntax public class FileLogger : ILogger Constructors | Improve this Doc View Source FileLogger(String, LogLevel) Creates a new instance of the file logger Declaration public FileLogger(string path, LogLevel level = LogLevel.Info) Parameters Type Name Description System.String path The path of the log file. LogLevel level The level to assign to the logger. Properties | Improve this Doc View Source Level The level of logging to apply to this logger. Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel Methods | Improve this Doc View Source Error(String, Object[]) Error log messages Declaration public void Error(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Info(String, Object[]) Informative log messages Declaration public void Info(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Trace(String, Object[]) Informative log messages Declaration public void Trace(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Warning(String, Object[]) Warning log messages Declaration public void Warning(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args Implements ILogger"
  },
  "api/DiscordRPC.Logging.html": {
    "href": "api/DiscordRPC.Logging.html",
    "title": "Namespace DiscordRPC.Logging | Discord RPC C#",
    "keywords": "Namespace DiscordRPC.Logging Classes ConsoleLogger Logs the outputs to the console using System.Console.WriteLine FileLogger Logs the outputs to a file NullLogger Ignores all log events Interfaces ILogger Logging interface to log the internal states of the pipe. Logs are sent in a NON thread safe way. They can come from multiple threads and it is upto the ILogger to account for it. Enums LogLevel Level of logging to use."
  },
  "api/DiscordRPC.Logging.ILogger.html": {
    "href": "api/DiscordRPC.Logging.ILogger.html",
    "title": "Interface ILogger | Discord RPC C#",
    "keywords": "Interface ILogger Logging interface to log the internal states of the pipe. Logs are sent in a NON thread safe way. They can come from multiple threads and it is upto the ILogger to account for it. Namespace : DiscordRPC.Logging Assembly : DiscordRPC.dll Syntax public interface ILogger Properties | Improve this Doc View Source Level The level of logging to apply to this logger. Declaration LogLevel Level { get; set; } Property Value Type Description LogLevel Methods | Improve this Doc View Source Error(String, Object[]) Error log messsages Declaration void Error(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Info(String, Object[]) Informative log messages Declaration void Info(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Trace(String, Object[]) Debug trace messeages used for debugging internal elements. Declaration void Trace(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Warning(String, Object[]) Warning log messages Declaration void Warning(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args"
  },
  "api/DiscordRPC.Logging.LogLevel.html": {
    "href": "api/DiscordRPC.Logging.LogLevel.html",
    "title": "Enum LogLevel | Discord RPC C#",
    "keywords": "Enum LogLevel Level of logging to use. Namespace : DiscordRPC.Logging Assembly : DiscordRPC.dll Syntax public enum LogLevel Fields Name Description Error Only Errors are logged Info Info, Warning and Errors are logged None Nothing is logged Trace Trace, Info, Warning and Errors are logged Warning Warning and Errors are logged"
  },
  "api/DiscordRPC.Logging.NullLogger.html": {
    "href": "api/DiscordRPC.Logging.NullLogger.html",
    "title": "Class NullLogger | Discord RPC C#",
    "keywords": "Class NullLogger Ignores all log events Inheritance System.Object NullLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Logging Assembly : DiscordRPC.dll Syntax public class NullLogger : ILogger Properties | Improve this Doc View Source Level The level of logging to apply to this logger. Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel Methods | Improve this Doc View Source Error(String, Object[]) Error log messages Declaration public void Error(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Info(String, Object[]) Informative log messages Declaration public void Info(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Trace(String, Object[]) Informative log messages Declaration public void Trace(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args | Improve this Doc View Source Warning(String, Object[]) Warning log messages Declaration public void Warning(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args Implements ILogger"
  },
  "api/DiscordRPC.Message.AuthenticateMessage.html": {
    "href": "api/DiscordRPC.Message.AuthenticateMessage.html",
    "title": "Class AuthenticateMessage | Discord RPC C#",
    "keywords": "Class AuthenticateMessage Representation of the message received by discord when an authentication response has been received. Inheritance System.Object Message AuthenticateMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class AuthenticateMessage : Message Properties | Improve this Doc View Source Application expiration date of OAuth2 token Declaration public Application Application { get; } Property Value Type Description Application | Improve this Doc View Source Expires expiration date of OAuth2 token Declaration public DateTime Expires { get; } Property Value Type Description System.DateTime | Improve this Doc View Source Scopes authorized scopes Declaration public string[] Scopes { get; } Property Value Type Description System.String [] | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type | Improve this Doc View Source User the authed user Declaration public User User { get; } Property Value Type Description User"
  },
  "api/DiscordRPC.Message.AuthorizeMessage.html": {
    "href": "api/DiscordRPC.Message.AuthorizeMessage.html",
    "title": "Class AuthorizeMessage | Discord RPC C#",
    "keywords": "Class AuthorizeMessage Representation of the message received by discord when an authorization response has been received. Inheritance System.Object Message AuthorizeMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class AuthorizeMessage : Message Properties | Improve this Doc View Source Code The OAuth2 authorization code Declaration public string Code { get; } Property Value Type Description System.String | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type"
  },
  "api/DiscordRPC.Message.CloseMessage.html": {
    "href": "api/DiscordRPC.Message.CloseMessage.html",
    "title": "Class CloseMessage | Discord RPC C#",
    "keywords": "Class CloseMessage Called when the IPC has closed. Inheritance System.Object Message CloseMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class CloseMessage : Message Properties | Improve this Doc View Source Code The closure code Declaration public int Code { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Reason The reason for the close Declaration public string Reason { get; } Property Value Type Description System.String | Improve this Doc View Source Type The type of message Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type"
  },
  "api/DiscordRPC.Message.ConnectionEstablishedMessage.html": {
    "href": "api/DiscordRPC.Message.ConnectionEstablishedMessage.html",
    "title": "Class ConnectionEstablishedMessage | Discord RPC C#",
    "keywords": "Class ConnectionEstablishedMessage The connection to the discord client was successful. This is called before Ready . Inheritance System.Object Message ConnectionEstablishedMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class ConnectionEstablishedMessage : Message Properties | Improve this Doc View Source ConnectedPipe The pipe we ended up connecting too Declaration public int ConnectedPipe { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type"
  },
  "api/DiscordRPC.Message.ConnectionFailedMessage.html": {
    "href": "api/DiscordRPC.Message.ConnectionFailedMessage.html",
    "title": "Class ConnectionFailedMessage | Discord RPC C#",
    "keywords": "Class ConnectionFailedMessage Failed to establish any connection with discord. Discord is potentially not running? Inheritance System.Object Message ConnectionFailedMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class ConnectionFailedMessage : Message Properties | Improve this Doc View Source FailedPipe The pipe we failed to connect too. Declaration public int FailedPipe { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type"
  },
  "api/DiscordRPC.Message.ErrorCode.html": {
    "href": "api/DiscordRPC.Message.ErrorCode.html",
    "title": "Enum ErrorCode | Discord RPC C#",
    "keywords": "Enum ErrorCode The error message received by discord. See https://discordapp.com/developers/docs/topics/rpc#rpc-server-payloads-rpc-errors for documentation Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public enum ErrorCode Fields Name Description InvalidCommand Invalid command was sent InvalidEvent Invalid event was sent InvalidPayload Invalid Payload received NotImplemented The functionality was not yet implemented PipeException The pipe had an exception ReadCorrupt The pipe received corrupted data Success Pipe was Successful UnknownError Unknown Discord error"
  },
  "api/DiscordRPC.Message.ErrorMessage.html": {
    "href": "api/DiscordRPC.Message.ErrorMessage.html",
    "title": "Class ErrorMessage | Discord RPC C#",
    "keywords": "Class ErrorMessage Created when a error occurs within the ipc and it is sent to the client. Inheritance System.Object Message ErrorMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class ErrorMessage : Message Properties | Improve this Doc View Source Code The Discord error code. Declaration [JsonPropertyName(\"code\")] public ErrorCode Code { get; } Property Value Type Description ErrorCode | Improve this Doc View Source Message The message associated with the error code. Declaration [JsonPropertyName(\"message\")] public string Message { get; } Property Value Type Description System.String | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type"
  },
  "api/DiscordRPC.Message.html": {
    "href": "api/DiscordRPC.Message.html",
    "title": "Namespace DiscordRPC.Message | Discord RPC C#",
    "keywords": "Namespace DiscordRPC.Message Classes AuthenticateMessage Representation of the message received by discord when an authentication response has been received. AuthorizeMessage Representation of the message received by discord when an authorization response has been received. CloseMessage Called when the IPC has closed. ConnectionEstablishedMessage The connection to the discord client was successful. This is called before Ready . ConnectionFailedMessage Failed to establish any connection with discord. Discord is potentially not running? ErrorMessage Created when a error occurs within the ipc and it is sent to the client. JoinMessage Called when the Discord Client wishes for this process to join a game. D -> C. JoinRequestMessage Called when some other person has requested access to this game. C -> D -> C. Message Messages received from discord. PresenceMessage Representation of the message received by discord when the presence has been updated. ReadyMessage Called when the ipc is ready to send arguments. SpectateMessage Called when the Discord Client wishes for this process to spectate a game. D -> C. SubscribeMessage Called as validation of a subscribe UnsubscribeMessage Called as validation of a subscribe VoiceSettingsMessage Represents a message containing voice settings received from Discord. Enums ErrorCode The error message received by discord. See https://discordapp.com/developers/docs/topics/rpc#rpc-server-payloads-rpc-errors for documentation MessageType Type of message."
  },
  "api/DiscordRPC.Message.JoinMessage.html": {
    "href": "api/DiscordRPC.Message.JoinMessage.html",
    "title": "Class JoinMessage | Discord RPC C#",
    "keywords": "Class JoinMessage Called when the Discord Client wishes for this process to join a game. D -> C. Inheritance System.Object Message JoinMessage SpectateMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class JoinMessage : Message Properties | Improve this Doc View Source Secret The JoinSecret to connect with. Declaration [JsonPropertyName(\"secret\")] public string Secret { get; } Property Value Type Description System.String | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type"
  },
  "api/DiscordRPC.Message.JoinRequestMessage.html": {
    "href": "api/DiscordRPC.Message.JoinRequestMessage.html",
    "title": "Class JoinRequestMessage | Discord RPC C#",
    "keywords": "Class JoinRequestMessage Called when some other person has requested access to this game. C -> D -> C. Inheritance System.Object Message JoinRequestMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class JoinRequestMessage : Message Properties | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type | Improve this Doc View Source User The discord user that is requesting access. Declaration [JsonPropertyName(\"user\")] public User User { get; } Property Value Type Description User"
  },
  "api/DiscordRPC.Message.Message.html": {
    "href": "api/DiscordRPC.Message.Message.html",
    "title": "Class Message | Discord RPC C#",
    "keywords": "Class Message Messages received from discord. Inheritance System.Object Message AuthenticateMessage AuthorizeMessage CloseMessage ConnectionEstablishedMessage ConnectionFailedMessage ErrorMessage JoinMessage JoinRequestMessage PresenceMessage ReadyMessage SubscribeMessage UnsubscribeMessage VoiceSettingsMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public abstract class Message Constructors | Improve this Doc View Source Message() Creates a new instance of the message Declaration protected Message() Properties | Improve this Doc View Source TimeCreated The time the message was created Declaration public DateTime TimeCreated { get; } Property Value Type Description System.DateTime | Improve this Doc View Source Type The type of message received from discord Declaration public abstract MessageType Type { get; } Property Value Type Description MessageType"
  },
  "api/DiscordRPC.Message.MessageType.html": {
    "href": "api/DiscordRPC.Message.MessageType.html",
    "title": "Enum MessageType | Discord RPC C#",
    "keywords": "Enum MessageType Type of message. Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public enum MessageType Fields Name Description Authenticate The Discord Client received an authorize response. Authorize The Discord Client received an authorize response. Close The connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. ConnectionEstablished The connection to the discord client was successful. This is called before Ready . ConnectionFailed Failed to establish any connection with discord. Discord is potentially not running? Error A error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. Join The Discord Client wishes for this process to join a game. JoinRequest Another discord user requests permission to join this game. PresenceUpdate The Discord Client has updated the presence. Ready The Discord Client is ready to send and receive messages. Spectate The Discord Client wishes for this process to spectate a game. Subscribe The Discord Client has subscribed to an event. Unsubscribe The Discord Client has unsubscribed from an event. VoiceSettings The Discord Client received an VoiceSettings response. (GetVoiceSettings/SetVoiceSettings)"
  },
  "api/DiscordRPC.Message.PresenceMessage.html": {
    "href": "api/DiscordRPC.Message.PresenceMessage.html",
    "title": "Class PresenceMessage | Discord RPC C#",
    "keywords": "Class PresenceMessage Representation of the message received by discord when the presence has been updated. Inheritance System.Object Message PresenceMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class PresenceMessage : Message Properties | Improve this Doc View Source ApplicationID The ID of the application discord has set it for Declaration public string ApplicationID { get; } Property Value Type Description System.String | Improve this Doc View Source Name The name of the application Discord has set it for Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Presence The rich presence Discord has set Declaration public BaseRichPresence Presence { get; } Property Value Type Description BaseRichPresence | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type"
  },
  "api/DiscordRPC.Message.ReadyMessage.html": {
    "href": "api/DiscordRPC.Message.ReadyMessage.html",
    "title": "Class ReadyMessage | Discord RPC C#",
    "keywords": "Class ReadyMessage Called when the ipc is ready to send arguments. Inheritance System.Object Message ReadyMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class ReadyMessage : Message Properties | Improve this Doc View Source Configuration The configuration of the connection Declaration [JsonPropertyName(\"config\")] public Configuration Configuration { get; set; } Property Value Type Description Configuration | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type | Improve this Doc View Source User User the connection belongs too Declaration [JsonPropertyName(\"user\")] public User User { get; set; } Property Value Type Description User | Improve this Doc View Source Version The version of the RPC Declaration [JsonPropertyName(\"v\")] public int Version { get; set; } Property Value Type Description System.Int32"
  },
  "api/DiscordRPC.Message.SpectateMessage.html": {
    "href": "api/DiscordRPC.Message.SpectateMessage.html",
    "title": "Class SpectateMessage | Discord RPC C#",
    "keywords": "Class SpectateMessage Called when the Discord Client wishes for this process to spectate a game. D -> C. Inheritance System.Object Message JoinMessage SpectateMessage Inherited Members JoinMessage.Secret Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class SpectateMessage : JoinMessage Properties | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides JoinMessage.Type"
  },
  "api/DiscordRPC.Message.SubscribeMessage.html": {
    "href": "api/DiscordRPC.Message.SubscribeMessage.html",
    "title": "Class SubscribeMessage | Discord RPC C#",
    "keywords": "Class SubscribeMessage Called as validation of a subscribe Inheritance System.Object Message SubscribeMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class SubscribeMessage : Message Properties | Improve this Doc View Source Event The event that was subscribed too. Declaration public EventType Event { get; } Property Value Type Description EventType | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type"
  },
  "api/DiscordRPC.Message.UnsubscribeMessage.html": {
    "href": "api/DiscordRPC.Message.UnsubscribeMessage.html",
    "title": "Class UnsubscribeMessage | Discord RPC C#",
    "keywords": "Class UnsubscribeMessage Called as validation of a subscribe Inheritance System.Object Message UnsubscribeMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class UnsubscribeMessage : Message Properties | Improve this Doc View Source Event The event that was subscribed too. Declaration public EventType Event { get; } Property Value Type Description EventType | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type"
  },
  "api/DiscordRPC.Message.VoiceSettingsMessage.html": {
    "href": "api/DiscordRPC.Message.VoiceSettingsMessage.html",
    "title": "Class VoiceSettingsMessage | Discord RPC C#",
    "keywords": "Class VoiceSettingsMessage Represents a message containing voice settings received from Discord. Inheritance System.Object Message VoiceSettingsMessage Inherited Members Message.TimeCreated System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC.Message Assembly : DiscordRPC.dll Syntax public class VoiceSettingsMessage : Message Properties | Improve this Doc View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides Message.Type | Improve this Doc View Source VoiceSettings Gets or sets the voice settings received from Discord. Declaration public VoiceSettings VoiceSettings { get; set; } Property Value Type Description VoiceSettings"
  },
  "api/DiscordRPC.Party.html": {
    "href": "api/DiscordRPC.Party.html",
    "title": "Class Party | Discord RPC C#",
    "keywords": "Class Party Structure representing the part the player is in. Inheritance System.Object Party Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class Party Properties | Improve this Doc View Source CurrentSize The current size of the players party / lobby / group. Declaration [JsonIgnore] public int CurrentSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ID A unique ID for the player's current party / lobby / group. If this is not supplied, they player will not be in a party and the rest of the information will not be sent. Max 128 Bytes Declaration [JsonPropertyName(\"id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string ID { get; set; } Property Value Type Description System.String | Improve this Doc View Source Max The maximum size of the party / lobby / group. This is required to be larger than CurrentSize . If it is smaller than the current party size, it will automatically be set too CurrentSize when the presence is sent. Declaration [JsonIgnore] public int Max { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Privacy The privacy of the party Declaration [JsonPropertyName(\"privacy\")] public Party.PrivacySetting Privacy { get; set; } Property Value Type Description Party.PrivacySetting"
  },
  "api/DiscordRPC.Party.PrivacySetting.html": {
    "href": "api/DiscordRPC.Party.PrivacySetting.html",
    "title": "Enum Party.PrivacySetting | Discord RPC C#",
    "keywords": "Enum Party.PrivacySetting Privacy of the party Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public enum PrivacySetting Fields Name Description Private The party is private, invites only. Public THe party is public, anyone can join."
  },
  "api/DiscordRPC.PresenceUpdateEvent.html": {
    "href": "api/DiscordRPC.PresenceUpdateEvent.html",
    "title": "Delegate PresenceUpdateEvent | Discord RPC C#",
    "keywords": "Delegate PresenceUpdateEvent Called when the Discord Client has updated the presence. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void PresenceUpdateEvent(object sender, PresenceMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event PresenceMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.ReadyEvent.html": {
    "href": "api/DiscordRPC.ReadyEvent.html",
    "title": "Delegate ReadyEvent | Discord RPC C#",
    "keywords": "Delegate ReadyEvent Called when the Discord Client is ready to send and receive messages. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void ReadyEvent(object sender, ReadyMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event ReadyMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.RichPresence.html": {
    "href": "api/DiscordRPC.RichPresence.html",
    "title": "Class RichPresence | Discord RPC C#",
    "keywords": "Class RichPresence The Rich Presence structure that will be sent and received by Discord. Use this class to build your presence and update it appropriately. Inheritance System.Object BaseRichPresence RichPresence Inherited Members BaseRichPresence.InternalDetails BaseRichPresence.InternalState BaseRichPresence.State BaseRichPresence.Details BaseRichPresence.Timestamps BaseRichPresence.Assets BaseRichPresence.Party BaseRichPresence.Secrets BaseRichPresence.ToRichPresence() BaseRichPresence.HasTimestamps() BaseRichPresence.HasAssets() BaseRichPresence.HasParty() BaseRichPresence.HasSecrets() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public sealed class RichPresence : BaseRichPresence Properties | Improve this Doc View Source Buttons The buttons to display in the presence. Max of 2 Declaration [JsonPropertyName(\"buttons\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public Button[] Buttons { get; set; } Property Value Type Description Button [] Methods | Improve this Doc View Source Clone() Clones the presence into a new instance. Used for thread safe writing and reading. This function will ignore properties if they are in an invalid state. Declaration public RichPresence Clone() Returns Type Description RichPresence | Improve this Doc View Source WithAssets(Assets) Sets the assets of the Rich Presence. See also Assets . Declaration public RichPresence WithAssets(Assets assets) Parameters Type Name Description Assets assets The names of the images to use and the tooltips to give those images. Returns Type Description RichPresence The modified Rich Presence. | Improve this Doc View Source WithDetails(String) Sets the details of the Rich Presence. See also Details . Declaration public RichPresence WithDetails(string details) Parameters Type Name Description System.String details What the user is currently doing. Returns Type Description RichPresence The modified Rich Presence. | Improve this Doc View Source WithParty(Party) Sets the Rich Presence's party. See also Party . Declaration public RichPresence WithParty(Party party) Parameters Type Name Description Party party The party the player is currently in. Returns Type Description RichPresence The modified Rich Presence. | Improve this Doc View Source WithSecrets(Secrets) Sets the Rich Presence's secrets. See also Secrets . Declaration public RichPresence WithSecrets(Secrets secrets) Parameters Type Name Description Secrets secrets The secrets used for Join / Spectate. Returns Type Description RichPresence The modified Rich Presence. | Improve this Doc View Source WithState(String) Sets the state of the Rich Presence. See also State . Declaration public RichPresence WithState(string state) Parameters Type Name Description System.String state The user's current Party status. Returns Type Description RichPresence The modified Rich Presence. | Improve this Doc View Source WithTimestamps(Timestamps) Sets the timestamp of the Rich Presence. See also Timestamps . Declaration public RichPresence WithTimestamps(Timestamps timestamps) Parameters Type Name Description Timestamps timestamps The time elapsed / remaining time data. Returns Type Description RichPresence The modified Rich Presence. Operators | Improve this Doc View Source Implicit(RichPresence to Boolean) Operator that converts a presence into a boolean for null checks. Declaration public static implicit operator bool (RichPresence presence) Parameters Type Name Description RichPresence presence Returns Type Description System.Boolean"
  },
  "api/DiscordRPC.RpcMessageEvent.html": {
    "href": "api/DiscordRPC.RpcMessageEvent.html",
    "title": "Delegate RpcMessageEvent | Discord RPC C#",
    "keywords": "Delegate RpcMessageEvent A RPC Message is received. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void RpcMessageEvent(object sender, Message msg); Parameters Type Name Description System.Object sender The handler that sent this event Message msg The raw message from the RPC"
  },
  "api/DiscordRPC.Secrets.html": {
    "href": "api/DiscordRPC.Secrets.html",
    "title": "Class Secrets | Discord RPC C#",
    "keywords": "Class Secrets The secrets used for Join / Spectate. Secrets are obfuscated data of your choosing. They could be match ids, player ids, lobby ids, etc. To keep security on the up and up, Discord requires that you properly hash/encode/encrypt/put-a-padlock-on-and-swallow-the-key-but-wait-then-how-would-you-open-it your secrets. You should send discord data that someone else's game client would need to join or spectate their friend. If you can't or don't want to support those actions, you don't need to send secrets. Visit the Rich Presence How-To for more information. Inheritance System.Object Secrets Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class Secrets Properties | Improve this Doc View Source Encoding The encoding the secret generator is using Declaration public static Encoding Encoding { get; } Property Value Type Description System.Text.Encoding | Improve this Doc View Source JoinSecret The secret data that will tell the client how to connect to the game to play. This could be a unique identifier for a fancy matchmaker or player id, lobby id, etc. It is recommended to encrypt this information, so it's hard for people to replicate it. Do NOT just use the IP address in this. That is a bad practice and can leave your players vulnerable! Max Length of 128 Bytes Declaration [JsonPropertyName(\"join\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string JoinSecret { get; set; } Property Value Type Description System.String | Improve this Doc View Source MatchSecret The unique match code to distinguish different games/lobbies. Use CreateSecret(Random) to get an appropriately sized secret. This cannot be null and must be supplied for the Join / Spectate feature to work. Max Length of 128 Bytes Declaration [Obsolete(\"This feature has been deprecated my Mason in issue #152 on the official library. Was originally used as a Notify Me feature, it has been replaced with Join / Spectate.\")] [JsonPropertyName(\"match\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string MatchSecret { get; set; } Property Value Type Description System.String | Improve this Doc View Source SecretLength The length of a secret in bytes. Declaration public static int SecretLength { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SpectateSecret The secret data that will tell the client how to connect to the game to spectate. This could be a unique identifier for a fancy matchmaker or player id, lobby id, etc. It is recommended to encrypt this information, so it's hard for people to replicate it. Do NOT just use the IP address in this. That is a bad practice and can leave your players vulnerable! Max Length of 128 Bytes Declaration [JsonPropertyName(\"spectate\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string SpectateSecret { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateFriendlySecret(Random) Creates a secret word using more readable friendly characters. Useful for debugging purposes. This is not a cryptographic function and should NOT be used for sensitive information. Declaration public static string CreateFriendlySecret(Random random) Parameters Type Name Description System.Random random The random used to generate the characters Returns Type Description System.String | Improve this Doc View Source CreateSecret(Random) Creates a new secret. This is NOT a cryptographic function and should NOT be used for sensitive information. This is mainly provided as a way to generate quick IDs. Declaration public static string CreateSecret(Random random) Parameters Type Name Description System.Random random The random to use Returns Type Description System.String Returns a SecretLength sized string with random characters from Encoding"
  },
  "api/DiscordRPC.ShortcutKeyCombo.html": {
    "href": "api/DiscordRPC.ShortcutKeyCombo.html",
    "title": "Class ShortcutKeyCombo | Discord RPC C#",
    "keywords": "Class ShortcutKeyCombo Represents a shortcut key combination for triggering actions like push-to-talk. Inheritance System.Object ShortcutKeyCombo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class ShortcutKeyCombo Properties | Improve this Doc View Source Code Key code of the shortcut. Declaration [JsonPropertyName(\"code\")] public int Code { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Name Name of the key. Declaration [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Type Type of the key (see key types). Declaration [JsonPropertyName(\"type\")] public int Type { get; set; } Property Value Type Description System.Int32"
  },
  "api/DiscordRPC.SpectateEvent.html": {
    "href": "api/DiscordRPC.SpectateEvent.html",
    "title": "Delegate SpectateEvent | Discord RPC C#",
    "keywords": "Delegate SpectateEvent Called when the Discord Client wishes for this process to spectate a game. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void SpectateEvent(object sender, SpectateMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event SpectateMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.SubscribeEvent.html": {
    "href": "api/DiscordRPC.SubscribeEvent.html",
    "title": "Delegate SubscribeEvent | Discord RPC C#",
    "keywords": "Delegate SubscribeEvent Called when the Discord Client has subscribed to an event. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void SubscribeEvent(object sender, SubscribeMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event SubscribeMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Timestamps.html": {
    "href": "api/DiscordRPC.Timestamps.html",
    "title": "Class Timestamps | Discord RPC C#",
    "keywords": "Class Timestamps Structure representing the start and end times of a match. Inheritance System.Object Timestamps Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class Timestamps Constructors | Improve this Doc View Source Timestamps() Creates an empty timestamp object Declaration public Timestamps() | Improve this Doc View Source Timestamps(DateTime) Creates a timestamp with the set start time Declaration public Timestamps(DateTime start) Parameters Type Name Description System.DateTime start | Improve this Doc View Source Timestamps(DateTime, DateTime) Creates a timestamp with a set duration Declaration public Timestamps(DateTime start, DateTime end) Parameters Type Name Description System.DateTime start The start time System.DateTime end The end time Properties | Improve this Doc View Source End The time the match will end. When included (not-null), the time in the rich presence will be shown as \"00:01 remaining\". This will override the \"elapsed\" to \"remaining\". Declaration [JsonIgnore] public DateTime? End { get; set; } Property Value Type Description System.Nullable < System.DateTime > | Improve this Doc View Source EndUnixMilliseconds Converts between DateTime and Milliseconds to give the Unix Epoch Time for the End . End Declaration [JsonPropertyName(\"end\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public ulong? EndUnixMilliseconds { get; set; } Property Value Type Description System.Nullable < System.UInt64 > | Improve this Doc View Source Now A new timestamp that starts from the current time. Declaration public static Timestamps Now { get; } Property Value Type Description Timestamps | Improve this Doc View Source Start The time that match started. When included (not-null), the time in the rich presence will be shown as \"00:01 elapsed\". Declaration [JsonIgnore] public DateTime? Start { get; set; } Property Value Type Description System.Nullable < System.DateTime > | Improve this Doc View Source StartUnixMilliseconds Converts between DateTime and Milliseconds to give the Unix Epoch Time for the Start . Declaration [JsonPropertyName(\"start\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public ulong? StartUnixMilliseconds { get; set; } Property Value Type Description System.Nullable < System.UInt64 > Methods | Improve this Doc View Source FromTimeSpan(Double) Creates a new timestamp starting at the current time and ending in the supplied timespan Declaration public static Timestamps FromTimeSpan(double seconds) Parameters Type Name Description System.Double seconds How long the Timestamp will last for in seconds. Returns Type Description Timestamps Returns a new timestamp with given duration. | Improve this Doc View Source FromTimeSpan(TimeSpan) Creates a new timestamp starting at current time and ending in the supplied timespan Declaration public static Timestamps FromTimeSpan(TimeSpan timespan) Parameters Type Name Description System.TimeSpan timespan How long the Timestamp will last for. Returns Type Description Timestamps Returns a new timestamp with given duration. | Improve this Doc View Source FromUnixMilliseconds(UInt64) Converts a Unix Epoch time into a System.DateTime . Declaration public static DateTime FromUnixMilliseconds(ulong unixTime) Parameters Type Name Description System.UInt64 unixTime The time in milliseconds since 1970 / 01 / 01 Returns Type Description System.DateTime | Improve this Doc View Source ToUnixMilliseconds(DateTime) Converts a System.DateTime into a Unix Epoch time (in milliseconds). Declaration public static ulong ToUnixMilliseconds(DateTime date) Parameters Type Name Description System.DateTime date The datetime to convert Returns Type Description System.UInt64"
  },
  "api/DiscordRPC.UnsubscribeEvent.html": {
    "href": "api/DiscordRPC.UnsubscribeEvent.html",
    "title": "Delegate UnsubscribeEvent | Discord RPC C#",
    "keywords": "Delegate UnsubscribeEvent Called when the Discord Client has unsubscribed from an event. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void UnsubscribeEvent(object sender, UnsubscribeMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event UnsubscribeMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.User.AvatarFormat.html": {
    "href": "api/DiscordRPC.User.AvatarFormat.html",
    "title": "Enum User.AvatarFormat | Discord RPC C#",
    "keywords": "Enum User.AvatarFormat Possible formats for avatars Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public enum AvatarFormat Fields Name Description GIF Graphics Interchange Format (.gif) Animated avatars that Discord Nitro users are able to use. If the user doesn't have an animated avatar, then it will just be a single frame gif. JPEG Joint Photographic Experts Group format (.jpeg) The format most cameras use. Lossy and does not support transparent avatars. PNG Portable Network Graphics format (.png) Losses format that supports transparent avatars. Most recommended for stationary formats with wide support from many libraries. WebP WebP format (.webp) Picture only version of WebM. Pronounced \"weeb p\"."
  },
  "api/DiscordRPC.User.AvatarSize.html": {
    "href": "api/DiscordRPC.User.AvatarSize.html",
    "title": "Enum User.AvatarSize | Discord RPC C#",
    "keywords": "Enum User.AvatarSize Possible square sizes of avatars. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public enum AvatarSize Fields Name Description X1024 1024 x 1024 pixels. X128 128 x 128 pixels. X16 16 x 16 pixels. X2048 2048 x 2048 pixels. X256 256 x 256 pixels. X32 32 x 32 pixels. X512 512 x 512 pixels. X64 64 x 64 pixels."
  },
  "api/DiscordRPC.User.Flag.html": {
    "href": "api/DiscordRPC.User.Flag.html",
    "title": "Enum User.Flag | Discord RPC C#",
    "keywords": "Enum User.Flag A flag on the user account Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Flags] public enum Flag Fields Name Description BugHunter Bug Hunters that found and reported bugs in Discord. EarlySupporter Early Supporter of Discord and had Nitro before the store was released. Employee Staff of Discord. HouseBalance The HypeSquad House of Balance (the best one). HouseBravery The HypeSquad House of Bravery. HouseBrilliance The HypeSquad House of Brilliance. HypeSquad Original HypeSquad which organise events. None No flag Partner Partners of Discord. TeamUser A part of a team. Unclear if it is reserved for members that share a team with the current application."
  },
  "api/DiscordRPC.User.html": {
    "href": "api/DiscordRPC.User.html",
    "title": "Class User | Discord RPC C#",
    "keywords": "Class User Object representing a Discord user. This is used for join requests. Inheritance System.Object User Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public class User Properties | Improve this Doc View Source Avatar The avatar hash of the user. To get a URL for the avatar, use the GetAvatarURL(User.AvatarFormat, User.AvatarSize) . This can be null if the user has no avatar. The GetAvatarURL(User.AvatarFormat, User.AvatarSize) will account for this and return the discord default. Declaration [JsonPropertyName(\"avatar\")] public string Avatar { get; set; } Property Value Type Description System.String | Improve this Doc View Source CdnEndpoint The endpoint for the CDN. Normally cdn.discordapp.com. Declaration public string CdnEndpoint { get; set; } Property Value Type Description System.String | Improve this Doc View Source Discriminator The discriminator of the user. Declaration [JsonPropertyName(\"discriminator\")] [JsonNumberHandling(JsonNumberHandling.AllowReadingFromString)] [Obsolete(\"Discord no longer uses discriminators.\")] public int Discriminator { get; set; } Property Value Type Description System.Int32 Remarks If the user has migrated to unique a Username , the discriminator will always be 0. | Improve this Doc View Source DisplayName The display name of the user Declaration [JsonPropertyName(\"global_name\")] public string DisplayName { get; set; } Property Value Type Description System.String Remarks This will be empty if the user has not set a global display name. | Improve this Doc View Source Flags The flags on a users account, often represented as a badge. Declaration [JsonPropertyName(\"flags\")] public User.Flag Flags { get; set; } Property Value Type Description User.Flag | Improve this Doc View Source ID The snowflake ID of the user. Declaration [JsonPropertyName(\"id\")] [JsonNumberHandling(JsonNumberHandling.AllowReadingFromString)] public ulong ID { get; set; } Property Value Type Description System.UInt64 | Improve this Doc View Source Premium The premium type of the user. Declaration [JsonPropertyName(\"premium_type\")] public User.PremiumType Premium { get; set; } Property Value Type Description User.PremiumType | Improve this Doc View Source Username The username of the player. Declaration [JsonPropertyName(\"username\")] public string Username { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source GetAvatarURL(User.AvatarFormat) Gets a URL that can be used to download the user's avatar. If the user has not yet set their avatar, it will return the default one that discord is using. The default avatar only supports the PNG format. Declaration public string GetAvatarURL(User.AvatarFormat format) Parameters Type Name Description User.AvatarFormat format The format of the target avatar Returns Type Description System.String URL to the discord CDN for the particular avatar Remarks The file returned will be 128px x 128px | Improve this Doc View Source GetAvatarURL(User.AvatarFormat, User.AvatarSize) Gets a URL that can be used to download the user's avatar. If the user has not yet set their avatar, it will return the default one that discord is using. The default avatar only supports the PNG format. Declaration public string GetAvatarURL(User.AvatarFormat format, User.AvatarSize size) Parameters Type Name Description User.AvatarFormat format The format of the target avatar User.AvatarSize size The optional size of the avatar you wish for. Returns Type Description System.String URL to the discord CDN for the particular avatar | Improve this Doc View Source ToString() Formats the user into a displayable format. If the user has a DisplayName , then this will be used. If the user still has a discriminator, then this will return the form of Username#Discriminator . Declaration public override string ToString() Returns Type Description System.String String of the user that can be used for display. Overrides System.Object.ToString()"
  },
  "api/DiscordRPC.User.PremiumType.html": {
    "href": "api/DiscordRPC.User.PremiumType.html",
    "title": "Enum User.PremiumType | Discord RPC C#",
    "keywords": "Enum User.PremiumType Type of premium Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public enum PremiumType Fields Name Description Nitro Nitro subscription. Has chat perks, animated avatars, server boosting, and access to free Nitro Games. NitroClassic Nitro Classic subscription. Has chat perks and animated avatars. None No subscription to any forms of Nitro."
  },
  "api/DiscordRPC.VoiceSettings.html": {
    "href": "api/DiscordRPC.VoiceSettings.html",
    "title": "Class VoiceSettings | Discord RPC C#",
    "keywords": "Class VoiceSettings Represents the structure for the Get Voice Settings response. Inheritance System.Object VoiceSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class VoiceSettings Properties | Improve this Doc View Source AutomaticGainControl State of automatic gain control. Declaration [JsonPropertyName(\"automatic_gain_control\")] public bool? AutomaticGainControl { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Deaf State of self-deafen. Declaration [JsonPropertyName(\"deaf\")] public bool? Deaf { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source EchoCancellation State of echo cancellation. Declaration [JsonPropertyName(\"echo_cancellation\")] public bool? EchoCancellation { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Input Input settings. Declaration [JsonPropertyName(\"input\")] public VoiceSettingsInput Input { get; set; } Property Value Type Description VoiceSettingsInput | Improve this Doc View Source Mode Voice mode settings. Declaration [JsonPropertyName(\"mode\")] public VoiceSettingsMode Mode { get; set; } Property Value Type Description VoiceSettingsMode | Improve this Doc View Source Mute State of self-mute. Declaration [JsonPropertyName(\"mute\")] public bool? Mute { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source NoiseSuppression State of noise suppression. Declaration [JsonPropertyName(\"noise_suppression\")] public bool? NoiseSuppression { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Output Output settings. Declaration [JsonPropertyName(\"output\")] public VoiceSettingsOutput Output { get; set; } Property Value Type Description VoiceSettingsOutput | Improve this Doc View Source Qos State of voice quality of service. Declaration [JsonPropertyName(\"qos\")] public bool? Qos { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source SilenceWarning State of silence warning notice. Declaration [JsonPropertyName(\"silence_warning\")] public bool? SilenceWarning { get; set; } Property Value Type Description System.Nullable < System.Boolean >"
  },
  "api/DiscordRPC.VoiceSettingsEvent.html": {
    "href": "api/DiscordRPC.VoiceSettingsEvent.html",
    "title": "Delegate VoiceSettingsEvent | Discord RPC C#",
    "keywords": "Delegate VoiceSettingsEvent Called when the Discord Client has sent an SetVoiceSettings Response. Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax public delegate void VoiceSettingsEvent(object sender, VoiceSettingsMessage args); Parameters Type Name Description System.Object sender The Discord client handler that sent this event VoiceSettingsMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.VoiceSettingsInput.html": {
    "href": "api/DiscordRPC.VoiceSettingsInput.html",
    "title": "Class VoiceSettingsInput | Discord RPC C#",
    "keywords": "Class VoiceSettingsInput Represents the input settings for voice. Inheritance System.Object VoiceSettingsInput Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class VoiceSettingsInput Properties | Improve this Doc View Source AvailableDevices Array of read-only device objects containing id and name string keys. Declaration [JsonPropertyName(\"available_devices\")] public DeviceObject[] AvailableDevices { get; set; } Property Value Type Description DeviceObject [] | Improve this Doc View Source DeviceId Device ID. Declaration [JsonPropertyName(\"device_id\")] public string DeviceId { get; set; } Property Value Type Description System.String | Improve this Doc View Source Volume Input voice level (min: 0, max: 100). Declaration [JsonPropertyName(\"volume\")] public float Volume { get; set; } Property Value Type Description System.Single"
  },
  "api/DiscordRPC.VoiceSettingsMode.html": {
    "href": "api/DiscordRPC.VoiceSettingsMode.html",
    "title": "Class VoiceSettingsMode | Discord RPC C#",
    "keywords": "Class VoiceSettingsMode Represents the voice settings mode object for the Get Voice Settings response. Inheritance System.Object VoiceSettingsMode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class VoiceSettingsMode Properties | Improve this Doc View Source AutoThreshold Voice activity threshold automatically sets its threshold. Declaration [JsonPropertyName(\"auto_threshold\")] public bool AutoThreshold { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Delay The PTT release delay (in ms) (min: 0, max: 2000). Declaration [JsonPropertyName(\"delay\")] public float Delay { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Shortcut Shortcut key combos for PTT. Declaration [JsonPropertyName(\"shortcut\")] public ShortcutKeyCombo[] Shortcut { get; set; } Property Value Type Description ShortcutKeyCombo [] | Improve this Doc View Source Threshold Threshold for voice activity (in dB) (min: -100, max: 0). Declaration [JsonPropertyName(\"threshold\")] public float Threshold { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Type Voice setting mode type (can be PUSH_TO_TALK or VOICE_ACTIVITY). Declaration [JsonPropertyName(\"type\")] public string Type { get; set; } Property Value Type Description System.String"
  },
  "api/DiscordRPC.VoiceSettingsOutput.html": {
    "href": "api/DiscordRPC.VoiceSettingsOutput.html",
    "title": "Class VoiceSettingsOutput | Discord RPC C#",
    "keywords": "Class VoiceSettingsOutput Represents the output settings for voice. Inheritance System.Object VoiceSettingsOutput Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : DiscordRPC Assembly : DiscordRPC.dll Syntax [Serializable] public class VoiceSettingsOutput Properties | Improve this Doc View Source AvailableDevices Array of read-only device objects containing id and name string keys. Declaration [JsonPropertyName(\"available_devices\")] public DeviceObject[] AvailableDevices { get; set; } Property Value Type Description DeviceObject [] | Improve this Doc View Source DeviceId Device ID. Declaration [JsonPropertyName(\"device_id\")] public string DeviceId { get; set; } Property Value Type Description System.String | Improve this Doc View Source Volume Output voice level (min: 0, max: 200). Declaration [JsonPropertyName(\"volume\")] public float Volume { get; set; } Property Value Type Description System.Single"
  },
  "articles/getting_started/monogame.html": {
    "href": "articles/getting_started/monogame.html",
    "title": "Mono Game Setup | Discord RPC C#",
    "keywords": "Mono Game Setup Currently no guide for Mono Game setup. Please follow the Standard Guide and include the follow files from the Unity Package: The Unity Named Pipes Library The Lachee/Discord-RPC-Unity Named Pipe Help Wanted Here Looking for those who have experience with Mono Game and implementing this library into their projects. If you have managed to successfully use this library in your project, please contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/getting_started/standard.html": {
    "href": "articles/getting_started/standard.html",
    "title": "Standard | Discord RPC C#",
    "keywords": "Standard The standard guide for all .NET projects. Download First the library must be downloaded. For standard projects within the .NET enviorment, a nuget package is available and is updated to the latest release. PM> Install-Package DiscordRichPresence A build of the library itself can be located in the AppVeyor Artifacts Usage The library has 3 phases that must be followed, Initialization Rich Presence Setting Deinitialization and Disposal You can set the Rich Presence of your app at any time while the client object has been constructed. The client will store the state of the presence and automatically resend it once initialized again. Initialization The creation of the client should happen once in the lifetime of the app. Where you put the constructor is upto your application design principles, but in general its always a good idea to put it in your initializers. The client should be ideally treated like a singleton and only ever created once. Multiple instances of the client can conflict with each other and cause unpredictable results within Discord and the end users Rich Presence. public DiscordRpcClient Client { get; private set;} void Setup() { Client = new DiscordRpcClient(\"my_client_id\"); //Creates the client Client.Initialize(); //Connects the client } Note that the Initialize() can be called later and the current presence state will be re-sent to the Discord Client. Setting Rich Presence Setting Rich Presence is easy once the client has been initialized: //Set Presence client.SetPresence(new RichPresence() { Details = \"Example Project\", State = \"csharp example\", Assets = new Assets() { LargeImageKey = \"image_large\", LargeImageText = \"Lachee's Discord IPC Library\", SmallImageKey = \"image_small\" } }); You may call this as regularly as you wish, the default behaviour of the application will ignore duplicate presence and Discord itself will handle ratelimiting. With that said, its always a good idea to only set the presence when there is actual change, to avoid any overheads. Disposal It is important that the client is properly disposed when finished. This will safely disconnect from Discord and dispose of the resources correctly. If you have any issues with ghosting (particularly in Unity3D), make sure you dispose the client. //Dispose client void Cleanup() { client.Dispose(); } Events By defaults, events will be executed as they occur. This means they are executed on the RPC Thread , and not on the main. For most applications, this works fine and is treated as a normal event from any other library you may use. However, for applications where thread-safety is paramount (such as Game Engines), you may need to disable this feature and manually invoke events on your calling thread like so: void Start() { //Creates a new client, telling it not to automatically invoke the events on RPC thread. Client = new DiscordRpcClient(\"my_client_id\", autoEvents: false); Client.Initialize(); } void Update() { //Invoke the events once per-frame. The events will be executed on calling thread. Client.Invoke(); } Please note that this method is only required where cross-thread talk is a big no-no. Implementing this as a Timer would just defeat the purpose as they are threaded anyways . Further Reading If you wish to implement the Join and Spectate feature within your project (those buttons), please read Joining & Spectating Introduction to get started."
  },
  "articles/getting_started/unity3d.html": {
    "href": "articles/getting_started/unity3d.html",
    "title": "Unity3D | Discord RPC C#",
    "keywords": "Unity3D Please visit the documentation for Lachee/Discord-RPC-Unity"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting started with DiscordRPC C# | Discord RPC C#",
    "keywords": "Getting started with DiscordRPC C# Getting started with DiscordRPC-C# is easy! With automatic nuget packages and a fully fledge Unity3D package, you can get started in no time. Dependencies Newtonsoft.JSON .NET 3.5+ or Unity3D 5.5+ Select Project Type Standard .NET Project - Recommended. For most users that are making a .NET Application Lachee/Discord-RPC-Unity - For Unity3D users that want to add Rich Presence to their game. MonoGame Project / Modding / Godot - For developers using custom MonoGame engines or modding existing games. Need More Help? Still stuck? Make a new GitHub issue !"
  },
  "articles/join_spectate/intro.html": {
    "href": "articles/join_spectate/intro.html",
    "title": "Join / Spectate | Discord RPC C#",
    "keywords": "Join / Spectate Discord Rich Presence can serve as a form of match maker for your game. You can display a \"Join\" and \"Spectate\" button on your Rich Presence to allow people to connect directly through discord. Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/join_spectate/join.html": {
    "href": "articles/join_spectate/join.html",
    "title": "ToDo | Discord RPC C#",
    "keywords": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/join_spectate/join_requests.html": {
    "href": "articles/join_spectate/join_requests.html",
    "title": "ToDo | Discord RPC C#",
    "keywords": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/join_spectate/spectate.html": {
    "href": "articles/join_spectate/spectate.html",
    "title": "ToDo | Discord RPC C#",
    "keywords": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/rich_presence/guidelines.html": {
    "href": "articles/rich_presence/guidelines.html",
    "title": "ToDo | Discord RPC C#",
    "keywords": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/rich_presence/intro.html": {
    "href": "articles/rich_presence/intro.html",
    "title": "Rich Presence | Discord RPC C#",
    "keywords": "Rich Presence Rich Presence needs to be initially setup on your Discord Developer Portal and it's recommended to follow the Best Practices . Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "index.html": {
    "href": "index.html",
    "title": "Discord Rich Presence | Discord RPC C#",
    "keywords": "Discord Rich Presence This is a C# implementation of the Discord RPC library which was originally written in C++. This avoids having to use the official C++ and instead provides a managed way of using the Rich Presence within the .NET environment*. While the official C++ library has been deprecated, this library has continued support and development for all your Rich Presence need, without requiring the Game SDK. Here are some key features of this library: Message Queuing Threaded Reads Managed Pipes * Error Handling & Error Checking with automatic reconnects Events from Discord (such as presence update and join requests) Full Rich Presence Implementation (including Join / Spectate) Inline Documented (for all your IntelliSense needs) Helper Functionality (eg: AvatarURL generator from Join Requests) Ghost Prevention (Tells Discord to clear the RP on disposal) Full Unity3D Editor (Contains all the tools, inspectors and helpers for a Unity3D game all in one package). Documentation All the documentation can be found lachee.github.io/discord-rpc-csharp/docs/ Installation Dependencies: .NET 8.0 .NET Project For projects that target either .NET Core or .NETFX, you can get the package on nuget : PM> Install-Package DiscordRichPresence You can also Download or Build your own version of the library if you have more specific requirements. Unity3D Game Engine Unity Package is being moved to Lachee/Discord-RPC-Unity . Please check the releases / documentation there. Usage The Discord.Example project within the solution contains example code, showing how to use all available features. For Unity Specific examples, check out the example project included. There are 3 important stages of usage, Initialization, Invoking and Deinitialization. It's important you follow all 3 stages to ensure proper behaviour of the library. Initialization This stage will setup the connection to Discord and establish the events. Once you have done the initialization you can call SetPresence and other variants as many times as you wish throughout your code. Please note that ideally this should only run once, otherwise conflicts may occur with them trying to access the same Discord client at the same time. public DiscordRpcClient client; //Called when your application first starts. //For example, just before your main loop, on OnEnable for unity. void Initialize() { /* Create a Discord client NOTE: If you are using Unity3D, you must use the full constructor and define the pipe connection. */ client = new DiscordRpcClient(\"my_client_id\"); //Set the logger client.Logger = new ConsoleLogger() { Level = LogLevel.Warning }; //Subscribe to events client.OnReady += (sender, e) => { Console.WriteLine(\"Received Ready from user {0}\", e.User.Username); }; client.OnPresenceUpdate += (sender, e) => { Console.WriteLine(\"Received Update! {0}\", e.Presence); }; //Connect to the RPC client.Initialize(); //Set the rich presence //Call this as many times as you want and anywhere in your code. client.SetPresence(new RichPresence() { Details = \"Example Project\", State = \"csharp example\", Assets = new Assets() { LargeImageKey = \"image_large\", LargeImageText = \"Lachee's Discord IPC Library\", SmallImageKey = \"image_small\" } }); } Invoking Invoking is optional. Use this when thread safety is paramount. The client will store messages from the pipe and won't invoke them until you call Invoke() or DequeueMessages() . It does this because the pipe is working on another thread, and manually invoking ensures proper thread safety and order of operations (especially important in Unity3D applications). In order to enable this method of event calling, you need to set it in the constructor of the DiscordRpcClient under autoEvents . //The main loop of your application, or some sort of timer. Literally the Update function in Unity3D void Update() { //Invoke all the events, such as OnPresenceUpdate client.Invoke(); }; Here is an example on how a Timer could be used to invoke the events for a WinForm var timer = new System.Timers.Timer(150); timer.Elapsed += (sender, args) => { client.Invoke(); }; timer.Start(); Deinitialization It's important that you dispose your client before your application terminates. This will stop the threads, abort the pipe reads, and tell Discord to clear the presence. Failure to do so may result in a memory leak! //Called when your application terminates. //For example, just after your main loop, on OnDisable for unity. void Deinitialize() { client.Dispose(); } Building DiscordRPC Library dotnet build -c Release Unity3D If you wish to have barebones Unity3D implementation, you need to build the DiscordRPC.dll , the Unity Named Pipes Library and the UnityNamedPipe.cs . Put these in your own Unity Project and the .dll s in a folder called Plugins . UWP / .NET MAUI / WIN UI 3 For now, the library doesn't work on UWP applications until we find the issue and fix it. In order to make this library work with the WIN UI 3 related applications such as .NET MAUI, you need to define runFullTrust Capability inside Package.appxmanifest . Here is an example of how to add runFullTrust to your WIN UI 3 application: Package.appxmanifest : <?xml version=\"1.0\" encoding=\"utf-8\"?> <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\" xmlns:uap=\"http://schemas.microsoft.com/appx/manifest/uap/windows10\" xmlns:rescap=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities\" IgnorableNamespaces=\"uap rescap\"> ... <Capabilities> <rescap:Capability Name=\"runFullTrust\" /> </Capabilities> </Package> If you use .NET MAUI or WIN UI 3 template for C#, it automatically puts runFullTrust capability. Development To add a new command you have to edit/create some files. Here is a list of the files you need to edit: Command.cs - Check if the enum value exists. Remove [Obsolete(\"...\", true)] if necessary or add a new enum value to the Command enum. Events.cs - Add a new event of following form: csharp public delegate void CommandNameEvent(object sender, VoiceSettingsMessage args); MessageType.cs - Add a new message type to the enum. Normally as CommandName . create CommandNameCommand.cs - Create a new class that inherits from ICommand and implements the PreparePayload method. This method should contain all Command arguments. Also create an internal class CommandNameResponse that contains all fields from the response. Make it serializable. create CommandNameMessage.cs - Create a new class that inherits from Message and implements the MessageType property. This class should contain all Command response arguments. Following changes are necessary in DiscordRpcClient.cs : Add a new event to the DiscordRpcClient class of the form: csharp public event CommandNameEvent OnCommandName; Add the Command logic of following form: public void CommandName(...) { if (IsDisposed) throw new ObjectDisposedException(\"Discord IPC Client\"); if (connection == null) throw new ObjectDisposedException(\"Connection\", \"Cannot initialize as the connection has been deinitialized\"); if (!IsInitialized) throw new UninitializedException(); connection.EnqueueCommand(new CommandNameCommand()); } Add in the ProcessMessage method the new MessageType case, so it triggers the event: csharp case MessageType.CommandName: OnAuthorize?.Invoke(this, message as AuthorizeMessage); break; Following changes are necessary in RpcConnection.cs : In the ProcessFrame method add a new case for the new MessageType: csharp case Command.CommandEnum: var commandResponse = response.GetObject<CommandNameResponse>(); EnqueueMessage(new CommandNameMessage(commandResponse)); break; Following changes are necessary in JsonSerializationContext.cs : Add JsonSerializable(typeof(CommandNameCommand)), Add JsonSerializable(typeof(ArgumentPayload<CommandNameCommand>)), Add JsonSerializable(typeof(CommandNameResponse)), Add JsonSerializable(typeof(CommandNameMessage)),"
  }
}